[build-system]
requires = ["setuptools>=69.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-learning-assistant"
version = "1.0.0"
description = "AI驱动的软件架构师学习助手后端服务"
authors = [
    {name = "AI Learning Team", email = "team@ailearning.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11,<3.13"
keywords = ["ai", "learning", "fastapi", "education"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # 核心框架
    "fastapi>=0.110.0,<0.120.0",
    "uvicorn[standard]>=0.27.0,<0.30.0",
    "pydantic>=2.6.0,<3.0.0",
    "pydantic-settings>=2.2.0,<3.0.0",
    
    # 数据库
    "sqlalchemy>=2.0.25,<2.1.0",
    "asyncpg>=0.29.0,<0.30.0",
    "psycopg2-binary>=2.9.9,<3.0.0",
    "aiosqlite>=0.20.0,<0.21.0",
    "alembic>=1.13.0,<2.0.0",
    
    # Redis缓存
    "redis>=5.0.0,<6.0.0",
    
    # AI服务
    "openai>=1.12.0,<2.0.0",
    "psutil>=5.9.0,<6.0.0",
    
    # TTS语音合成
    "edge-tts>=6.1.0,<7.0.0",
    
    # 文档处理和RAG功能
    "PyPDF2>=3.0.0,<4.0.0",
    "python-docx>=1.1.0,<2.0.0",
    "markdown>=3.5.0,<4.0.0",
    "beautifulsoup4>=4.12.0,<5.0.0",
    "jieba>=0.42.0,<1.0.0",
    "sentence-transformers>=2.4.0,<3.0.0",
    "faiss-cpu>=1.8.0,<2.0.0",
    "numpy>=1.26.0,<2.0.0",
    
    # 任务调度
    "APScheduler>=3.10.0,<4.0.0",
    
    # 其他工具
    "python-multipart>=0.0.9,<1.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "passlib[bcrypt]>=1.7.0,<2.0.0",
    "aiofiles>=23.2.0,<25.0.0",
]

[project.optional-dependencies]
dev = [
    # 测试框架
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.23.0,<1.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "httpx>=0.27.0,<1.0.0",
    "pytest-cov>=4.1.0,<6.0.0",
    "pytest-env>=1.1.0,<2.0.0",
    "factory-boy>=3.3.0,<4.0.0",
    
    # 代码质量
    "black>=24.0.0,<25.0.0",
    "isort>=5.13.0,<6.0.0",
    "flake8>=7.0.0,<8.0.0",
    "mypy>=1.8.0,<2.0.0",
    "pre-commit>=3.6.0,<4.0.0",
    
    # 文档生成
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.5.0,<10.0.0",
]

test = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.23.0,<1.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "httpx>=0.27.0,<1.0.0",
    "pytest-cov>=4.1.0,<6.0.0",
    "pytest-env>=1.1.0,<2.0.0",
    "factory-boy>=3.3.0,<4.0.0",
]

prod = [
    "gunicorn>=21.2.0,<22.0.0",
]

[project.urls]
Homepage = "https://github.com/your-org/ai-learning-assistant"
Documentation = "https://your-docs-site.com"
Repository = "https://github.com/your-org/ai-learning-assistant.git"
"Bug Tracker" = "https://github.com/your-org/ai-learning-assistant/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "test_*"]

[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
] 